name: deployment_workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE.txt'
      - 'src/posts/contribute/contribute.md'
  pull_request:
    branches:
      - main

  workflow_dispatch:

permissions:
  pages: write
  id-token: write # actions/deploy-pages@v4 needs this
  issues: write

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
          all_but_latest: true

  test:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    env:
      URL_CHECKER_TIMEOUT: ${{ vars.URL_CHECKER_TIMEOUT }}
    concurrency:
      group: deployment_workflow
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies and run linters
        run: |
          npm install
          npm run lint:all

      - name: Run scripts in script/ directory
        run: |
          set -e
          for script in script/*.js; do
            if [ -f "$script" ] && [ -x "$script" ]; then
              echo "Running $script"
              node "$script"
            fi
          done
        env:
          URL_CHECKER_TIMEOUT: ${{ env.URL_CHECKER_TIMEOUT }}

  build:
    needs: test
    runs-on: ubuntu-latest
    env:
      PATH_PREFIX: "/${{ github.event.repository.name }}/"
    steps:
      - name: Verify test job success
        run: echo "Test job succeeded."

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Set PATH_PREFIX for Eleventy
        run: |
          echo "PATH_PREFIX=${{ env.PATH_PREFIX }}" >> $GITHUB_ENV

      - name: Build static pages with Eleventy (Production)
        run: npm run prod

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          name: site
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Verify build job success
        run: echo "Build job succeeded."

      - name: Download built site
        uses: actions/download-artifact@v4
        with:
          name: site
          path: _site

      - name: Deploy ðŸš€
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifact_name: site

      - name: get-date
        id: get_date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Determine Deployment Status
        id: deployment_status
        run: |
          REPO_URL="https://${{ github.actor }}.github.io/${{ github.repository }}"
          if [ "${{ job.status }}" == "success" ]; then
            echo "ISSUE_TITLE=${{ env.DATE }} - Deployment Succeeded" >> $GITHUB_ENV
          else
            echo "ISSUE_TITLE=${{ env.DATE }} - Deployment Failed" >> $GITHUB_ENV
          fi

      - name: Set up GitHub CLI
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.x'

      - uses: actions/checkout@v4
      - name: create an issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DATE=$(date +"%Y-%m-%d")
          REPO_URL="https://${{ github.actor }}.github.io/${{ github.repository }}"
          if [ "${{ job.status }}" == "success" ]; then
            gh issue create --title "${DATE} - Deployment Succeeded" --body "URL: $REPO_URL"
          else
            gh issue create --title "${DATE} - Deployment Failed" --body "URL: $REPO_URL"
          fi

